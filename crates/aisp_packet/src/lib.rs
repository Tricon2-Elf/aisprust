// #[macro_use]
// pub mod macros;

pub mod deserializer;
pub mod serializer;

pub mod error;
pub mod util;

pub mod packets;
pub mod shared;

// pub fn add(left: u64, right: u64) -> u64 {
//     left + right
// }
//
#[cfg(test)]
mod tests {
    // use super::*;

    use crate::packets;
    //
    // #[test]
    // fn test_parse() {
    //     let parse_data: &[u8] = &[
    //         0xbc, 0x62, 0x00, 0x00, 0x00, 0x00, 0x15, 0x9f, 0x36, 0xe7, 0x7f, 0x07, 0x10, 0x02,
    //     ];
    //
    //     let test = packets::PacketId::from_bytes(&parse_data).expect("Failed to parse packet");
    //
    //     assert!(false, "{}", format!("{:#?}", test));
    //     // let result = add(2, 2);
    //     // assert_eq!(result, 4);
    // }

    #[test]
    fn test_parse() {
        let parse_data: &[u8] = &[
            0x91, 0x34, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x01,
            0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D,
            0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B,
            0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
            0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, //, 0x13,
        ];

        let test = packets::PacketId::from_bytes(parse_data).expect("Failed to parse packet");

        let bytes = test.to_bytes().expect("failed to serialize");

        println!("{:?}\n {:?}", test, bytes);
        // assert!(false, "{}", format!("{:#?}, {:?}", test, bytes));
        // let result = add(2, 2);
        assert_eq!(parse_data, bytes);
        // assert!(false);
    }
}
